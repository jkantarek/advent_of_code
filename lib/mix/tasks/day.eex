defmodule AdventOfCode.Y<%= year %>.Day<%= day %> do
  @moduledoc """

  """

  @doc """
  Day <%= day %> - Part 1

  ## Examples

    iex> AdventOfCode.Y<%= year %>.Day<%= day %>.part1()
    nil

    iex> AdventOfCode.Y<%= year %>.Day<%= day %>.sample()
    nil

    

  """

  def sample() do
    part1("test_input.txt")
  end


  def part1(filename \\ "input.txt") do
    setup(filename)
  end

  def decoder(line) do
    line
  end

  def setup(filename) do
    AdventOfCode.etl_file(
      "lib/y_<%= year %>/d<%= day %>/#{filename}",
      &decoder/1,
      &AdventOfCode.split_newline/1,
      %{reject_blanks: true, reject_nils: true}
    )
  end

  @doc """
  Day <%= day %> - Part 2

  ## Examples

    iex> AdventOfCode.Y<%= year %>.Day<%= day %>.part2()
    nil

    iex> AdventOfCode.Y<%= year %>.Day<%= day %>.sample2()
    nil

  """

  def sample2() do
    part2("test_input.txt")
  end


  def part2(filename \\ "input.txt") do
    setup(filename)
  end
end
